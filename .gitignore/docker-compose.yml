version: '3.8'

services:

  # --- PostgreSQL Service ---
  postgresKeycloak:
  
    image: postgres:latest
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=keycloak
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgresPassword
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak -q"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    secrets:
      - postgresPassword
    volumes:
      - keycloakVolume:/var/lib/postgresql/data
    networks:
      - keycloakNetwork
    deploy:
      restart_policy:
        condition: on-failure

  # --- Keycloak Service ---
  keycloakATC:
    image: quay.io/keycloak/keycloak:latest
    ports:
      - "9280:8080"
    command: ["start"]
    entrypoint: /opt/keycloak/bin/keycloak-entrypoint.sh
    environment:
      # --- Use LATEST bootstrap variables ---
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
        #  - KC_BOOTSTRAP_ADMIN_PASSWORD_FILE=/run/secrets/keycloak_admin_password (entry point script calls upon the keycloak secret)

      # Database connection settings (Password handled by entrypoint)
      - KC_DB=postgres
      - KC_DB_URL_HOST=postgresKeycloak
      - KC_DB_URL_DATABASE=keycloak
      - KC_DB_USERNAME=keycloak

      # Keycloak hostname configuration
      - KC_HOSTNAME=https://key.andarhosting.com
      - KC_HOSTNAME_ADMIN_URL=https://key.andarhosting.com
      - KC_HTTP_ENABLED=true
      - KC_PROXY=edge
      - KC_HOSTNAME_STRICT_HTTPS=true
    secrets:
      - keycloak_admin_password # Needed by KC_BOOTSTRAP_ADMIN_PASSWORD_FILE
      - postgresPassword        # Needed by entrypoint script
    volumes:
      - ./keycloak-entrypoint.sh:/opt/keycloak/bin/keycloak-entrypoint.sh:ro
      - keycloakDataVolume:/opt/keycloak/data # Dedicated volume for Keycloak
    depends_on:
      - postgresKeycloak
    networks:
      - keycloakNetwork
    deploy:
      restart_policy:
        condition: on-failure

  # --- Redis Service ---
  redisATC:
  
    image: redis:latest
    command: ["/bin/sh", "-c", "redis-server --requirepass $$(cat /run/secrets/redisPassword)"]
    secrets:
      - redisPassword
    volumes:
      - redisVolume:/data
    networks:
      - redisNetwork
    deploy:
      restart_policy:
        condition: on-failure


# --- ATC Application Service ---
  atcApp:
    image: atc:apr30 # The image tag provided
    environment:
      # --- Configure ATC ---
      # Internal port ATC will listen on
      - SERVER_PORT=8080

      # --- Redis Connection (using service discovery) ---
      # Docker Swarm DNS resolves 'redisATC' within the redisNetwork
      - SPRING_DATA_REDIS_HOST=redisATC
      # Standard Redis port
      - SPRING_DATA_REDIS_PORT=6379
      # The 'password' env var will be set by the entrypoint script
      - SPRING_DATA_REDIS_PASSWORD=${password} 
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=DEBUG
      # Spring boot will use the password secert var in the entrypoint script
      # --- Keycloak Connection ---
      # Use the external URL configured for Keycloak in this stack
      - KEYCLOAK_BASEURL=https://key.andarhosting.com
      - KEYCLOAK_CLIENT=atc-login # KC Client ID
      - KEYCLOAK_REALM=atc      # Realm name for ATC in Keycloak

# --- ATC Public URL connection ---
      - SERVER_FORWARD_HEADERS_STRATEGY=NATIVE
      

  
    secrets:
      # Make the Redis password secret available to the entrypoint script at /run/secrets/redisPassword
      - redisPassword
    networks:
      # Connect to Redis network to resolve and communicate with the redisATC service
      - redisNetwork
      # Connect to keycloakNetwork if direct internal communication is needed
      - keycloakNetwork
    ports:
      # Map host port 9700 to container port 8080
      - "9700:8080"
    depends_on:
      # Influence startup order: wait for Redis and Keycloak services to be started
      - redisATC
      - keycloakATC
    deploy:
      restart_policy:
        condition: on-failure

    # --- Entrypoint Configuration ---
    volumes:
      # Mount the entrypoint script from the host's current directory into the container
      - ./atc-entrypoint.sh:/atc-entrypoint.sh
    # Override the default entrypoint to run our script first
    entrypoint: ["/bin/sh", "/atc-entrypoint.sh"]
    # Specify the command for the entrypoint script to execute after setting the password
    command: ["java", "-jar", "/app.jar"] # Adjust /app.jar if your application JAR has a different name/path

# Volumes
volumes:
  keycloakVolume:
  keycloakDataVolume:
  redisVolume:

# Networks
networks:
  keycloakNetwork:
    driver: overlay
    attachable: true
  redisNetwork:
    driver: overlay
    attachable: true

# Secrets
secrets:
  postgresPassword:
    external: true
    name: postgresPassword
  keycloak_admin_password:
    external: true
    name: keycloak_admin_password
  redisPassword:
    external: true
    name: redisPassword
